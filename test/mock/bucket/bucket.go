// Code generated by MockGen. DO NOT EDIT.
// Source: bucket.go

// Package mock_bucket is a generated GoMock package.
package mock_bucket

import (
	reflect "reflect"

	job "github.com/changsongl/delay-queue/job"
	gomock "github.com/golang/mock/gomock"
)

// MockBucket is a mock of Bucket interface.
type MockBucket struct {
	ctrl     *gomock.Controller
	recorder *MockBucketMockRecorder
}

// MockBucketMockRecorder is the mock recorder for MockBucket.
type MockBucketMockRecorder struct {
	mock *MockBucket
}

// NewMockBucket creates a new mock instance.
func NewMockBucket(ctrl *gomock.Controller) *MockBucket {
	mock := &MockBucket{ctrl: ctrl}
	mock.recorder = &MockBucketMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBucket) EXPECT() *MockBucketMockRecorder {
	return m.recorder
}

// CreateJob mocks base method.
func (m *MockBucket) CreateJob(j *job.Job, isTTR bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", j, isTTR)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateJob indicates an expected call of CreateJob.
func (mr *MockBucketMockRecorder) CreateJob(j, isTTR interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockBucket)(nil).CreateJob), j, isTTR)
}

// GetBucketJobs mocks base method.
func (m *MockBucket) GetBucketJobs(bid uint64) ([]job.NameVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketJobs", bid)
	ret0, _ := ret[0].([]job.NameVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketJobs indicates an expected call of GetBucketJobs.
func (mr *MockBucketMockRecorder) GetBucketJobs(bid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketJobs", reflect.TypeOf((*MockBucket)(nil).GetBucketJobs), bid)
}

// GetBuckets mocks base method.
func (m *MockBucket) GetBuckets() []uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuckets")
	ret0, _ := ret[0].([]uint64)
	return ret0
}

// GetBuckets indicates an expected call of GetBuckets.
func (mr *MockBucketMockRecorder) GetBuckets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuckets", reflect.TypeOf((*MockBucket)(nil).GetBuckets))
}

// GetMaxFetchNum mocks base method.
func (m *MockBucket) GetMaxFetchNum() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxFetchNum")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetMaxFetchNum indicates an expected call of GetMaxFetchNum.
func (mr *MockBucketMockRecorder) GetMaxFetchNum() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxFetchNum", reflect.TypeOf((*MockBucket)(nil).GetMaxFetchNum))
}

// SetMaxFetchNum mocks base method.
func (m *MockBucket) SetMaxFetchNum(num uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMaxFetchNum", num)
}

// SetMaxFetchNum indicates an expected call of SetMaxFetchNum.
func (mr *MockBucketMockRecorder) SetMaxFetchNum(num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxFetchNum", reflect.TypeOf((*MockBucket)(nil).SetMaxFetchNum), num)
}
