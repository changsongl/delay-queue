// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mock_store is a generated GoMock package.
package mock_store

import (
	reflect "reflect"

	job "github.com/changsongl/delay-queue/job"
	lock "github.com/changsongl/delay-queue/pkg/lock"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CollectInFlightJobNumberBucket mocks base method.
func (m *MockStore) CollectInFlightJobNumberBucket(bucket string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectInFlightJobNumberBucket", bucket)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectInFlightJobNumberBucket indicates an expected call of CollectInFlightJobNumberBucket.
func (mr *MockStoreMockRecorder) CollectInFlightJobNumberBucket(bucket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectInFlightJobNumberBucket", reflect.TypeOf((*MockStore)(nil).CollectInFlightJobNumberBucket), bucket)
}

// CollectInFlightJobNumberQueue mocks base method.
func (m *MockStore) CollectInFlightJobNumberQueue(queuePrefix string) (map[string]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectInFlightJobNumberQueue", queuePrefix)
	ret0, _ := ret[0].(map[string]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectInFlightJobNumberQueue indicates an expected call of CollectInFlightJobNumberQueue.
func (mr *MockStoreMockRecorder) CollectInFlightJobNumberQueue(queuePrefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectInFlightJobNumberQueue", reflect.TypeOf((*MockStore)(nil).CollectInFlightJobNumberQueue), queuePrefix)
}

// CreateJob mocks base method.
func (m *MockStore) CreateJob(j *job.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", j)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateJob indicates an expected call of CreateJob.
func (mr *MockStoreMockRecorder) CreateJob(j interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockStore)(nil).CreateJob), j)
}

// CreateJobInBucket mocks base method.
func (m *MockStore) CreateJobInBucket(bucket string, j *job.Job, isTTR bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJobInBucket", bucket, j, isTTR)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateJobInBucket indicates an expected call of CreateJobInBucket.
func (mr *MockStoreMockRecorder) CreateJobInBucket(bucket, j, isTTR interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobInBucket", reflect.TypeOf((*MockStore)(nil).CreateJobInBucket), bucket, j, isTTR)
}

// DeleteJob mocks base method.
func (m *MockStore) DeleteJob(j *job.Job) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJob", j)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJob indicates an expected call of DeleteJob.
func (mr *MockStoreMockRecorder) DeleteJob(j interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJob", reflect.TypeOf((*MockStore)(nil).DeleteJob), j)
}

// GetLock mocks base method.
func (m *MockStore) GetLock(name string) lock.Locker {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLock", name)
	ret0, _ := ret[0].(lock.Locker)
	return ret0
}

// GetLock indicates an expected call of GetLock.
func (mr *MockStoreMockRecorder) GetLock(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLock", reflect.TypeOf((*MockStore)(nil).GetLock), name)
}

// GetReadyJobsInBucket mocks base method.
func (m *MockStore) GetReadyJobsInBucket(bucket string, num uint) ([]job.NameVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadyJobsInBucket", bucket, num)
	ret0, _ := ret[0].([]job.NameVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReadyJobsInBucket indicates an expected call of GetReadyJobsInBucket.
func (mr *MockStoreMockRecorder) GetReadyJobsInBucket(bucket, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadyJobsInBucket", reflect.TypeOf((*MockStore)(nil).GetReadyJobsInBucket), bucket, num)
}

// LoadJob mocks base method.
func (m *MockStore) LoadJob(j *job.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadJob", j)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadJob indicates an expected call of LoadJob.
func (mr *MockStoreMockRecorder) LoadJob(j interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadJob", reflect.TypeOf((*MockStore)(nil).LoadJob), j)
}

// PopJobFromQueue mocks base method.
func (m *MockStore) PopJobFromQueue(queue string) (job.NameVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PopJobFromQueue", queue)
	ret0, _ := ret[0].(job.NameVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PopJobFromQueue indicates an expected call of PopJobFromQueue.
func (mr *MockStoreMockRecorder) PopJobFromQueue(queue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopJobFromQueue", reflect.TypeOf((*MockStore)(nil).PopJobFromQueue), queue)
}

// PushJobToQueue mocks base method.
func (m *MockStore) PushJobToQueue(queuePrefix, queueName string, j *job.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushJobToQueue", queuePrefix, queueName, j)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushJobToQueue indicates an expected call of PushJobToQueue.
func (mr *MockStoreMockRecorder) PushJobToQueue(queuePrefix, queueName, j interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushJobToQueue", reflect.TypeOf((*MockStore)(nil).PushJobToQueue), queuePrefix, queueName, j)
}

// ReplaceJob mocks base method.
func (m *MockStore) ReplaceJob(j *job.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceJob", j)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceJob indicates an expected call of ReplaceJob.
func (mr *MockStoreMockRecorder) ReplaceJob(j interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceJob", reflect.TypeOf((*MockStore)(nil).ReplaceJob), j)
}
